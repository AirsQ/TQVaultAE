<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="ok.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        jP8bJhikOIckcIcAAAAASUVORK5CYII=
</value>
  </data>
</root>